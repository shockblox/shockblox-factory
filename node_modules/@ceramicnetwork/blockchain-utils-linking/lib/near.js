"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NearAuthProvider = void 0;
const caip_1 = require("caip");
const util_1 = require("./util");
const sha256_1 = require("@stablelib/sha256");
const uint8arrays = __importStar(require("uint8arrays"));
const stringEncode = (str) => uint8arrays.toString(uint8arrays.fromString(str), 'base64pad');
class NearAuthProvider {
    constructor(provider, address, chainRef) {
        this.provider = provider;
        this.address = address;
        this.chainRef = chainRef;
        this.isAuthProvider = true;
    }
    async authenticate(message) {
        const encodedMsg = stringEncode(message);
        const { signature } = await this.provider.sign(encodedMsg);
        const digest = sha256_1.hash(signature);
        return `0x${uint8arrays.toString(digest, 'base16')}`;
    }
    async createLink(did) {
        const { message, timestamp } = util_1.getConsentMessage(did);
        const encodedMsg = stringEncode(message);
        const { signature, account } = await this.provider.sign(encodedMsg);
        const caipAccount = new caip_1.AccountID({
            address: account,
            chainId: `near:${this.chainRef}`,
        });
        return {
            version: 2,
            message,
            signature,
            account: caipAccount.toString(),
            timestamp,
        };
    }
    async accountId() {
        return new caip_1.AccountID({
            address: this.address,
            chainId: `near:${this.chainRef}`,
        });
    }
    withAddress(address) {
        return new NearAuthProvider(this.provider, address, this.chainRef);
    }
}
exports.NearAuthProvider = NearAuthProvider;
//# sourceMappingURL=near.js.map