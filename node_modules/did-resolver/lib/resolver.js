function e(){const e=new Map;return function(t,r){try{let o;function n(n){if(o)return n;const i=e.get(t.didUrl);return void 0!==i?i:Promise.resolve(r()).then(function(r){var n;return"notFound"!==(null==(n=r.didResolutionMetadata)?void 0:n.error)&&e.set(t.didUrl,r),r})}const i=function(){if(t.params&&"true"===t.params["no-cache"])return o=1,Promise.resolve(r())}();return Promise.resolve(i&&i.then?i.then(n):n(i))}catch(e){return Promise.reject(e)}}}function t(e,t){return t()}const r=new RegExp("^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$");function n(e){if(""===e||!e)return null;const t=e.match(r);if(t){const r={did:`did:${t[1]}:${t[2]}`,method:t[1],id:t[2],didUrl:e};if(t[4]){const e=t[4].slice(1).split(";");r.params={};for(const t of e){const e=t.split("=");r.params[e[0]]=e[1]}}return t[6]&&(r.path=t[6]),t[7]&&(r.query=t[7].slice(1)),t[8]&&(r.fragment=t[8].slice(1)),r}return null}const o={didResolutionMetadata:{},didDocument:null,didDocumentMetadata:{}};function i(e){return function(t,r,n){try{return Promise.resolve(function(i,s){try{var c=Promise.resolve(e(t,r,n)).then(function(e){return{...o,didResolutionMetadata:{contentType:"application/did+ld+json"},didDocument:e}})}catch(e){return s(e)}return c&&c.then?c.then(void 0,s):c}(0,function(e){return{...o,didResolutionMetadata:{error:"notFound",message:e.toString()}}}))}catch(e){return Promise.reject(e)}}}exports.Resolver=class{constructor(r={},n={}){this.registry=r,this.cache=!0===n.cache?e():n.cache||t,n.legacyResolvers&&Object.keys(n.legacyResolvers).map(e=>{this.registry[e]||(this.registry[e]=i(n.legacyResolvers[e]))})}resolve(e,t={}){try{const r=this,i=n(e);if(null===i)return Promise.resolve({...o,didResolutionMetadata:{error:"invalidDid"}});const s=r.registry[i.method];return Promise.resolve(s?r.cache(i,()=>s(i.did,i,r,t)):{...o,didResolutionMetadata:{error:"unsupportedDidMethod"}})}catch(e){return Promise.reject(e)}}},exports.inMemoryCache=e,exports.noCache=t,exports.parse=n,exports.wrapLegacyResolver=i;
//# sourceMappingURL=resolver.js.map
